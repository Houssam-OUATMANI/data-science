#!/usr/bin/env python
# coding: utf-8

# ARRAYS WITH NUMPY

# In[1]:


import numpy as np


# In[2]:


id_list = [1,2,3,4,5,6]


# In[3]:

#output
id_list [1, 2, 3, 4, 5, 6]


# In[6]:


array_idList = np.array(id_list)


# OUTPUT SHALL BE A VECTOR

# In[7]:


array_idList array([1, 2, 3, 4, 5, 6])


# In[8]:


d2_list = [[1,2,3],[4,5,6],[7,8,9]]


# In[9]:


array_2d_list = np.array(d2_list)


# OUTPUT SHALL BE A MATRICE

# In[10]:


array_2d_list

array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])


# CREATE EASY AND FAST ARRAYS USING THE ARRANGE METHOD (RANGE)

# In[15]:


np.arange(0 , 6)
array([0, 1, 2, 3, 4, 5])

# .arange(begin ,last, step)

# In[18]:


i = 0
j = 10
step = 2


# In[21]:


np.arange(i, j, step)
array([0, 2, 4, 6, 8])


# ARRAYS OF ZEROS WITH .zeros((rows, columns))

# In[22]:



np.zeros(5)
array([0., 0., 0., 0., 0.])


# In[23]:


np.zeros((4,5))


# ARRAYS OF ONES WITH .ones((rows, columns))

# In[24]:
array([[0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0.]])

np.ones(5)



# In[25]:
array([1., 1., 1., 1., 1.])


np.ones((4,5))
array([[1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.],
       [1., 1., 1., 1., 1.]])

# ARRAYS OF LINSPACE WITH .linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None, axis=0) Return evenly spaced numbers over a specified interval.

# In[34]:


np.linspace(0,10 , 200)
array([ 0.        ,  0.05025126,  0.10050251,  0.15075377,  0.20100503,
        0.25125628,  0.30150754,  0.35175879,  0.40201005,  0.45226131,
        0.50251256,  0.55276382,  0.60301508,  0.65326633,  0.70351759,
        0.75376884,  0.8040201 ,  0.85427136,  0.90452261,  0.95477387,
        1.00502513,  1.05527638,  1.10552764,  1.15577889,  1.20603015,
        1.25628141,  1.30653266,  1.35678392,  1.40703518,  1.45728643,
        1.50753769,  1.55778894,  1.6080402 ,  1.65829146,  1.70854271,
        1.75879397,  1.80904523,  1.85929648,  1.90954774,  1.95979899,
        2.01005025,  2.06030151,  2.11055276,  2.16080402,  2.21105528,
        2.26130653,  2.31155779,  2.36180905,  2.4120603 ,  2.46231156,
        2.51256281,  2.56281407,  2.61306533,  2.66331658,  2.71356784,
        2.7638191 ,  2.81407035,  2.86432161,  2.91457286,  2.96482412,
        3.01507538,  3.06532663,  3.11557789,  3.16582915,  3.2160804 ,
        3.26633166,  3.31658291,  3.36683417,  3.41708543,  3.46733668,
        3.51758794,  3.5678392 ,  3.61809045,  3.66834171,  3.71859296,
        3.76884422,  3.81909548,  3.86934673,  3.91959799,  3.96984925,
        4.0201005 ,  4.07035176,  4.12060302,  4.17085427,  4.22110553,
        4.27135678,  4.32160804,  4.3718593 ,  4.42211055,  4.47236181,
        4.52261307,  4.57286432,  4.62311558,  4.67336683,  4.72361809,
        4.77386935,  4.8241206 ,  4.87437186,  4.92462312,  4.97487437,
        5.02512563,  5.07537688,  5.12562814,  5.1758794 ,  5.22613065,
        5.27638191,  5.32663317,  5.37688442,  5.42713568,  5.47738693,
        5.52763819,  5.57788945,  5.6281407 ,  5.67839196,  5.72864322,
        5.77889447,  5.82914573,  5.87939698,  5.92964824,  5.9798995 ,
        6.03015075,  6.08040201,  6.13065327,  6.18090452,  6.23115578,
        6.28140704,  6.33165829,  6.38190955,  6.4321608 ,  6.48241206,
        6.53266332,  6.58291457,  6.63316583,  6.68341709,  6.73366834,
        6.7839196 ,  6.83417085,  6.88442211,  6.93467337,  6.98492462,
        7.03517588,  7.08542714,  7.13567839,  7.18592965,  7.2361809 ,
        7.28643216,  7.33668342,  7.38693467,  7.43718593,  7.48743719,
        7.53768844,  7.5879397 ,  7.63819095,  7.68844221,  7.73869347,
        7.78894472,  7.83919598,  7.88944724,  7.93969849,  7.98994975,
        8.04020101,  8.09045226,  8.14070352,  8.19095477,  8.24120603,
        8.29145729,  8.34170854,  8.3919598 ,  8.44221106,  8.49246231,
        8.54271357,  8.59296482,  8.64321608,  8.69346734,  8.74371859,
        8.79396985,  8.84422111,  8.89447236,  8.94472362,  8.99497487,
        9.04522613,  9.09547739,  9.14572864,  9.1959799 ,  9.24623116,
        9.29648241,  9.34673367,  9.39698492,  9.44723618,  9.49748744,
        9.54773869,  9.59798995,  9.64824121,  9.69849246,  9.74874372,
        9.79899497,  9.84924623,  9.89949749,  9.94974874, 10.        ])


# EYE   .eye returns a matrices diagonal of ones and rest of zeros

# In[35]:


np.eye(5)
array([[1., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0.],
       [0., 0., 1., 0., 0.],
       [0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 1.]])

# random Method 

# In[36]:


np.random.rand(3)
array([0.78322877, 0.56531561, 0.45852212])

# In[37]:


np.random.rand(3 , 3)
array([[0.86046144, 0.22166754, 0.25348121],
       [0.20048369, 0.87933692, 0.54346278],
       [0.51972669, 0.4581693 , 0.03080895]])


# randn Return a sample (or samples) from the “standard normal” distribution.
# 

# In[42]:


np.random.randn(5)
array([ 0.96356229,  1.29944578,  0.17465616, -2.0699441 ,  0.94001761])


# In[44]:


np.random.randn(2,3)
array([[-1.67047779, -0.94948716, -0.06726256],
       [ 0.0423301 ,  0.83343866,  2.24568116]])


# randint (included , excluded , range)

# In[45]:


np.random.randint(1, 559, 15)
array([465, 309, 163, 351, 497, 116, 491, 310, 475, 413, 109, 363, 192,
       480,  46])


#     .reshape Gives a new shape to an array without changing its data.

# In[47]:


my_array = np.arange(0, 35)


# In[48]:


my_array
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34])

# In[49]:


my_array.reshape(5, 7)
array([[ 0,  1,  2,  3,  4,  5,  6],
       [ 7,  8,  9, 10, 11, 12, 13],
       [14, 15, 16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25, 26, 27],
       [28, 29, 30, 31, 32, 33, 34]])

# In[50]:


my_array.reshape(7, 5)
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24],
       [25, 26, 27, 28, 29],
       [30, 31, 32, 33, 34]])


# min() , max(), argmin() => return index of the min value , argmax()

# In[51]:


my_array.min()


# In[52]:


my_array.argmin()


# In[53]:


my_array.max()


# In[54]:


my_array.argmax()


# shape,  get the current shape of an array whether it's a matrice or a vector

# In[60]:


my_arr = np.random.randint(0 , 100 , 15)


# In[61]:


my_arr.shape
(15,)


# In[65]:


my_arr = my_arr.reshape(5, 3)


# In[66]:


my_arr
array([[78, 75, 99],
       [21, 54, 35],
       [14, 15, 29],
       [ 2, 49,  2],
       [27,  0, 81]])

# In[67]:


my_arr.shape
(5, 3)

# Data type with dtype

# In[70]:


my_arr.dtype
dtype('int64')

# In[ ]:




